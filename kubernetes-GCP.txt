
----
Cloud
Virtual Servers:

AWS -ec2
Azure - virtual machines
GCP - compute engines

kubernetes - nodes

Cluster:
Master Node (Manages Cluster)
Worker Node (Run your Applications)
-----------------------------------
-----------------------------------
Kubernetes Engine - gcp

Clusters:
where you can create clusters and manage them

Workloads:
where you can manage the applications or the containers that you would want to deploy into the cluster

Services & Ingress
Services give external world access to applications which are deployed into Kubernetes clusters

Configuration
to store your application configuration, 

Storage 
to provide persistent data storage for your application


---
You will need to choose the type of nodes you want, the number of node you want, and their location

--------------------
Command line to cloud shell
Connect cluster
gcloud container clusters get-credentials <cluster_name> --zone us-central1-a --project <project_ID>

Create deployment
kubectl create deployment hello-world-rest-api --image=in28min/hello-world
-rest-api:0.0.1.RELEASE

Expose a service to the outside world
kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=
8080

Now go to Services & Ingress

----------------------
kubectl get events
kubectl get replicaset  =  kubectl get rs
kubectl get deployment

kubectl create deployment - create a deployment, replicaset and pod
kubectl expose deployment - create a service

----------------------
kubectl get pods -o wide
Each pod has a unique IP address
A pod can actually contain multiple containers. All the containers which are present in a pod share resources. Within the same pod, the containers can talk to each other using localhost

kubectl explain pods
kubectl get pods
kubectl describe pods hello-world-rest-api-f5c8584d4-b449r

----------------------
kubectl get rs
Replicasets ensure that a specific number of pods are running at all times.

kubectl delete pods hello-world-rest-api-f5c8584d4-b449r

kubectl scale deployment hello-world-rest-api --replicas=3
kubectl get rs
kubectl get events
kubectl get events --sort-by=.metadata.creationTimestamp
kubectl explain replicaset
-----------------------
kubectl get rs -o wide

//set image deployment <name-deployment> <container=image:tag>
kubectl set image deployment hello-world-rest-api hello-world-rest-api=DUMMY_IMAGE:TEST
kubectl get rs -o wide
kubectl get pods
OUTPUT:
   	status InvalidImageName

kubectl describe pod hello-world-rest-api-7567bd47b5-vh99w
OUTPUT: 
	Failed to apply default image tag "DUMMY_IMAGE:TEST": couldn't parse image reference 	"DUMMY_IMAGE:TEST": invalid reference format: repository name must be lowercase

kubectl get events --sort-by=.metadata.creationTimestamp

----
kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE
kubectl get pods
kubectl get events --sort-by=.metadata.creationTimestamp

//strategy by default, is something called rolling updates
----
LoadBalancer
kubectl get services

ClusterIP service
Can only be accessed from inside the cluster

=================================
Master node
1. etcd - Distribute Database
2. API server, kube-apiserver
3. Scheduler
4. Controller Manager

Worker node
1. Node Agent - kubelet
2. Networking ComponentÂ  kube-proxy
3. Container Runtime - CRI (docker)
4. PODS (Multiple pods running containers)

kubectl get componentstatuses
===================================================================================
gcloud
https://cloud.google.com/sdk/docs/install
gcloud auth login

Rollouts
kubectl rollout history deployment hello-world-rest-api
OUTPUT:
	change-cause <none>

kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.3.RELEASE --record=true

kubectl rollout history deployment hello-world-rest-api
curl http://35.224.117.182:8080/hello-world

kubectl rollout undo deployment hello-world-rest-api --to-revision=1
kubectl rollout history deployment hello-world-rest-api

<pod>
kubectl logs hello-world-rest-api-f5c8584d4-8rm86


==========================
YML
kubectl get deployment 
kubectl get deployment <name_deployment>
kubectl get deployment hello-world-rest-api -o yaml
kubectl get deployment hello-world-rest-api -o yaml > deployment.yaml

kubectl get service hello-world-rest-api -o yaml > service.yaml

kubectl apply -f deployment.yaml
kubectl get pods

kubectl get all -o wide
kubectl delete all -l app=hello-world-rest-api

-------
kubectl apply -f deployment-complete.yaml
kubectl get all
kubectl get svc --watch
curl http://35.224.117.182:8080/hello-world
watch curl http://35.224.117.182:8080/hello-world

//edit file yaml - number of replicas
kubectl diff -f deployment-complete.yaml
kubectl apply -f deployment-complete.yaml

----
File yaml
minReadySeconds: 45

So we are saying give the container the 45 seconds to get ready, and only then send the request out.


kubectl get pods --all-namespaces
kubectl get pods --all-namespaces -l app=hello-world-rest-api

kubectl get services --all-namespaces
kubectl get services --all-namespaces --sort-by=.spec.type
kubectl get services --all-namespaces --sort-by=.metadata.name
kubectl cluster-info
kubectl cluster-info dump
kubectl top node
kubectl top pod
kubectl get services
kubectl get svc
kubectl get ev
kubectl get rs
kubectl get ns
kubectl get nodes
kubectl get no
kubectl get pods
kubectl get po

kubectl delete all -l app=hello-world-rest-api
kubectl get all
=======================================
microservices
kubectl version

01-currency-exchange-microservice-basic
02-currency-conversion-microservice-basic
//update apiVersion in file yaml - apps/v1

kubectl apply -f deployment.yaml
kubectl get svc --watch

http://34.72.20.64:8000/currency-exchange/from/EUR/to/INR
http://35.184.167.236:8100/currency-conversion/from/EUR/to/INR/quantity/10


kubectl apply -f 00-configmap-currency-conversion.yaml
kubectl get configmap
kubectl describe configmap

-----
Change Service to NodePort
kubectl apply -f deployment.yaml
kubectl apply -f ingress.yaml

kubectl get ingress

Witout port
http://34.98.69.73/currency-exchange/from/EUR/to/INR
