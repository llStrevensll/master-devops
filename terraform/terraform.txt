brew install terraform
choco install terraform
terraform --version
terraform version
terraform init
export AWS_ACCESS_KEY_ID=*******
export AWS_SECRET_ACCESS_KEY=*********
terraform console
    aws_s3_bucket.my_s3_bucket
    aws -> provider, s3_bucket -> resource type, my_s3_bucket->name resource

    aws_s3_bucket.my_s3_bucket.versioning
    output: List
        [
            {
                "enabled" = true
                "mfa_delete" = false
            },
        ]
    
    aws_s3_bucket.my_s3_bucket.versioning[0]
    aws_s3_bucket.my_s3_bucket.versioning[0].enabled

terraform apply -refresh=false
terraform console
  value = aws_iam_user.my_iam_user



terraform plan -out iam.tfplan
terraform apply "iam.tfplan"


terraform apply -target=aws_iam_user.my_iam_user
//use .gitignore for file tfstate 


Create file outputs
terraform plan -refresh=false

terraform plan -refresh=falseorm destroy

#STATE
#DESIRED - KNOW - ACTUAL
Desired:
the desired state, which is actually defined in the terraform 
configuration files.

Know:
The known state - which is present in the tfstate files

Actual:
And the actual state which is actually the state of
a specific resource on the cloud, on AWS.


-----------------------------------------
aws_iam_user
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user

----
terraform console
aws_iam_user.my_iam_users
aws_iam_user.my_iam_users[0].arn
aws_iam_user.my_iam_users[2].arn
aws_iam_user.my_iam_users[2].name
aws_iam_user.my_iam_users[2].path

terraform validate
terraform fmt
terraform show
https://www.terraform.io/docs/commands/apply.html


----
terraform console
var.iam_user_name_prefix

terraform validate //validate type in variable

terraform apply --refresh=false


export TF_VAR_iam_user_name_prefix=FROM_ENV_VARIABLE_IAM_PREFIX
$Env:TF_VAR_iam_user_name_prefix='FROM_ENV_VARIABLE_IAM_PREFIX'

terraform plan --refresh=false
terraform plan -refresh=false -var="iam_user_name_prefix=VALUE_FROM_COMMAND_LINE"

terraform apply -var-file="some-name.tfvars"

------------------
list-and-sets

terraform console
var.names
var.names[0]
length(var.names)
reverse(var.names)
distinct(var.names)
toset(var.names)
concat(var.names, ["new item"])
contains(var.names, "steven")
sort(var.names)
range(10)
range(1,12)
range(1,12.2)
range(1,12.3)
https://www.terraform.io/docs/configuration/functions.html
https://www.terraform.io/docs/configuration/functions/list.html



========
04-maps

terraform console
var.names
var.names.angel
keys(var.names)
values(var.names)
lookup(var.names, "angel")
lookup(var.names, "test", "default")

//edit to map of maps

